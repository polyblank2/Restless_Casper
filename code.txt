And now I begin my coding Kata!

var myStack = [];

//push
myStack.push(1);
myStack.push(2);
myStack.push(3);

//pop
myStack.pop(); //3
myStack.pop(); //2
myStack.pop(); //1


var myQueue = [];

//push
myQueue.push(1);
myQueue.push(2);
myQueue.push(3);

//pop
myQueue.shift(); //1
myQueue.shift(); //2
myQueue.shift(); //3
        

function LinkedList(){  
  this.head = null;
}


LinkedList.prototype.push = function(val){
    var node = {
       value: val,
       next: null
    }
    if(!this.head){
      this.head = node;      
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }
  
var sll = new LinkedList();

//push node
sll.push(2);
sll.push(3);
sll.push(4);

//check values by traversing LinkedList 
sll.head; //Object {data: 2, next: Object}
sll.head.next; //Object {data: 3, next: Object}
sll.head.next.next; //Object {data: 4, next: null}

var node = {
  value: val,
  next: null,
  previous: null  
}
   
function DoublyLinkedList(){
   this.head = null;
}

DoublyLinkedList.prototype.push = function(val){
   var head = this.head,
       current = head,
       previous = head;
  if(!head){
      this.head = {value: val, previous:null, next:null };
  }
  else{
      while(current && current.next){
         previous = current;
         current = current.next;
      }     
     current.next = {value: val, previous:current, next:null}
  }  
}

var dll = new DoublyLinkedList();
dll.push(2);
dll.push(3);
dll.push(4);
dll.push(5);


LinkedList.prototype.remove = function(val){
    var current = this.head;
    //case-1
    if(current.value == val){
       this.head = current.next;     
    }
    else{
      var previous = current;
      
      while(current.next){
        //case-3
        if(current.value == val){
          previous.next = current.next;          
          break;
        }
        previous = current;
        current = current.next;
      }
      //case -2
      if(current.value == val){
        previous.next == null;
      }
    }
  }  
  
sll.remove(3); 
sll.remove(1); 


function reversesll(sll){
  
  if(!sll.head || !sll.head.next) return sll;

  var nodes=[], 
    current = sll.head;
  //storing all the nodes in an array
  while(current){
    nodes.push(current);
    current = current.next;
  }
    
  var reversedLL = new LinkedList();
  
  reversedLL.head = nodes.pop();
  current = reversedLL.head;
  
  var node = nodes.pop();  
  //make sure to make next of the newly inserted node to be null
  //other wise the last node of your SLL will retain its old next.
  while(node){
     node.next = null;
     current.next = node;
     
     current = current.next;
     node = nodes.pop();
  }
  return reversedLL;
}


//create the LL
var sll = new LinkedList();
sll.push(1);
sll.push(2);
sll.push(3);
sll.push(4);
sll.push(5);

//test it
reversesll(sll);
//{head: {value:5, next:{value: 4, next: {value: 3, next: {value:2, next:{value:1, next: null}}}}}}


function reverseDoublyLL(dll){
   var head = dll.head,
       current = dll.head,
       tmp;
   while(current){
      tmp = current.next;
      current.next = current.previous;
      current.previous = tmp;
      if(!tmp){
         //set the last node as header
         dll.head = current;
      }
      current = tmp;
   }
  return dll;
}

function kthFromEnd(sll, k){
   var node = sll.head,
       i = 1,
       kthNode;
   //handle, 0 or negative value of k
   if(k<=0) return;

    while(node){
      if(i == k) kthNode = sll.head;
      else if(i-k>0){
       kthNode = kthNode.next;
      }
      i++;

      node = node.next;
    }
   return kthNode;
}

//create the LL
var sll = new LinkedList();
sll.push(1);
sll.push(2);
sll.push(3);
sll.push(4);
sll.push(5);

//test at least once
kthFromEnd(sll, 1); //Object {value: 5, next: null}
kthFromEnd(sll, 3); //Object {value: 3, next: Object}

function deleteKthFromEnd(sll, k){
   var node = sll.head,
       i = 1,
       kthNode,
       previous;
   if(k<=0) return sll;

    while(node){
      if(i == k) kthNode = sll.head;
      else if(i-k>0){
       previous = kthNode;
       kthNode = kthNode.next;
      }
      i++;

      node = node.next;
    }
    //kth node is the head
    if(!previous)
       sll.head = sll.head.next;
    else{
     previous.next = kthNode.next;
   }
   return sll;
}


//test at least once
var sll = new LinkedList();
sll.push(1);
sll.push(2);
sll.push(3);
sll.push(4);
sll.push(5);

deleteKthFromEnd(sll, 2);
//{head: {value:1, next:{value: 2, next: {value: 3, next: {value:1, next:null}}}}}

function deleteNodeDLL(val){
   var current = dll.head,
       previous;
   
   //delete head
   if(current.value == val){
      dll.head = current.next;
      //if there is only one node, then dll.head is null
      if(dll.head) dll.head.previous = null;
      return dll;
   }

   while(current.next){
      if(current.value == val){
         previous.next = current.next;
         current.next.previous = previous;
         return dll;
     }
     previous = current;
     current = current.next;
   }
   
   //delete last node
   if(current.value == val){
     previous.next = null;
   }
   return dll;
}

function detectLoop(sll){
   var slowPointer = sll.head, 
       fastPointer = sll.head;

   while(slowPointer && fastPointer && fastPointer.next){
     slowPointer = slowPointer.next;
     fastPointer = fastPointer.next.next;

     if(slowPointer == fastPointer){
        return true;
     }
   }
   return false;
}
        

//test at least once
var sll = new LinkedList();
sll.push(1);
sll.push(2);
sll.push(3);
sll.push(4);
sll.push(5);

detectLoop(sll); //false

//create a loop manually. point next of 5 to point 3
sll.head.next.next.next.next.next = sll.head.next.next

detectLoop(sll); //true
        
function findLoopStart(sll){
    var slow = sll.head,
        fast = sll.head;
    while(slow && fast){
       slow = slow.next;
 
       //if hits null, then there is no loop
       if(!fast.next){
          return null;
       }
 
       fast = fast.next.next;
       if(slow == fast){
           slow = sll.head;
           while(slow != fast){
              slow = slow.next;
              fast = fast.next;
           }
           return slow;
       }
   }
}

function getLength(sll){
   var head = sll.head,
       current = head,
       pointer = head,
       anotherPtr,
       len = 0;
    //use the previously written function
    var loopStartNode = findLoopStart(sll);
    if(!loopStartNode){
       while(current){
          current= current.next;
          len++;
       }
       return len;
    }
    else{       
       anotherPtr = loopStartNode;
       while(pointer != anotherPtr){
          len += 2;
          pointer = pointer.next;
          anotherPtr = anotherPtr.next;          
       }
       return len;
    }
}

function rotateByKthNode(sll, k){
   var prevHead = sll.head,
       previous = sll.head, 
       current = sll.head,
       i = 1;
   while(current.next){
     if(i==k+1){
       sll.head = current;
       previous.next = null;
     }
     previous = current;
     current = current.next;
     i++;
  }
  current.next = prevHead;
  return sll;
}

rotateByKthNode(sll,3);
//{head: {value:4, next:{value: 5, next: {value: 1, next: {value:2, next:{value:3, next: null}}}}}}


function pushSorted(sll, val){
   var head = sll.head,
       current = head,
       previous;
   //value lower than head value
   if(val < sll.head.value){
      sll.head = {value: val, next: head};
      return sll;
   }

   while(current){
      if(current.value > val){
         previous.next = {value: val, next: current};
         return sll;
      }
      previous = current;
      current = current.next;
   } 
   //value higher than the last node value
   previous.next = {value:val, next: null};
   return sll;
}


var sll = new LinkedList();
sll.push(5);
sll.push(7);
sll.push(10);
sll.push(14);

pushSorted(sll, 9);
//{head: {value: 5, next: {value: 7, next: {value: 9, next: {value: 10, next: {value: 14, next: null}}}}}}

function CircularLinkedList(){  
  this.head = null;
}


CircularLinkedList.prototype.push = function(val){
   var head = this.head,
       current = head,
       node = {value: val, next: null, previous: null};

   if(!head){
      node.next = node;
      node.previous = node;
      this.head = node;
   }
   else{
      while(current.next != head){
         current = current.next;
      }
      
      node.next = head;
      node.previous = current;
   
      head.previous = node;
      current.next = node;
   }   
}


var cll = new CircularLinkedList();
cll.push(3);
cll.push(4);
cll.push(5);


